<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="26" hostname="ibs-adama-ux1.corp.alleninstitute.org" name="pytest" skipped="107" tests="357" time="30.726" timestamp="2021-06-04T07:14:59.874739"><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_data_xforms" name="test_get_stimulus_timestamps" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_data_xforms" name="test_get_rewards" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_data_xforms" name="test_get_licks" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_data_xforms" name="test_empty_licks" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_data_xforms" name="test_get_licks_excess" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_data_xforms" name="test_get_licks_failure" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_behavior_stimulus_file[880293569-/allen/programs/braintv/production/neuralcoding/prod0/specimen_703198163/behavior_session_880293569/880289456.pkl]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:22: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_behavior_stimulus_file[0-None]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:22: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_foraging_id_to_behavior_session_id[394a910e-94c7-4472-9838-5345aff59ed8]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:45: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_behavior_session_id_to_foraging_id[823847007]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:54: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_extended_trials[880293569]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:65: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_extended_trials[881236782]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:65: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_extended_trials[881236761]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:65: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_stimulus_timestamps" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_licks" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_behavior_session_uuid" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_behavior_session_uuid'">MockBehaviorLimsApi = &lt;test_behavior_lims_api.MockBehaviorLimsApi.&lt;locals&gt;.MockBehaviorLimsApi object at 0x7fce99c359d0&gt;, monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99c35510&gt;

    def test_get_behavior_session_uuid(MockBehaviorLimsApi, monkeypatch):
        with monkeypatch.context() as ctx:
            def dummy_init(self, extractor, behavior_stimulus_file):
                self._extractor = extractor
                self._behavior_stimulus_file = behavior_stimulus_file
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
            stimulus_file = MockBehaviorLimsApi._behavior_stimulus_file()
            metadata = BehaviorMetadata(
                extractor=MockBehaviorLimsApi.extractor,
                behavior_stimulus_file=stimulus_file)
    
        expected = UUID('138531ab-fe59-4523-9154-07c8d97bbe03')
&gt;       assert expected == metadata.behavior_session_uuid

test_behavior_lims_api.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99c358d0&gt;

    @property
    def behavior_session_uuid(self) -&gt; Optional[uuid.UUID]:
&gt;       return self._behavior_session_uuid.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_behavior_session_uuid'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:330: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_stimulus_frame_rate" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_date_of_acquisition" time="0.001"><failure message="TypeError: __init__() got an unexpected keyword argument 'extractor'">MockBehaviorLimsApi = &lt;test_behavior_lims_api.MockBehaviorLimsApi.&lt;locals&gt;.MockBehaviorLimsApi object at 0x7fce99bd0550&gt;

    def test_get_date_of_acquisition(MockBehaviorLimsApi):
        api = MockBehaviorLimsApi
        expected = datetime(2019, 9, 26, 16, tzinfo=pytz.UTC)
&gt;       actual = api.get_metadata().date_of_acquisition

test_behavior_lims_api.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_behavior_lims_api.MockBehaviorLimsApi.&lt;locals&gt;.MockBehaviorLimsApi object at 0x7fce99bd0550&gt;

    def get_metadata(self) -&gt; BehaviorMetadata:
        """Return metadata about the session.
        :rtype: BehaviorMetadata
        """
        metadata = BehaviorMetadata(
            extractor=self.extractor,
            stimulus_timestamps=self.get_stimulus_timestamps(),
&gt;           behavior_stimulus_file=self._behavior_stimulus_file()
        )
E       TypeError: __init__() got an unexpected keyword argument 'extractor'

../../../brain_observatory/behavior/session_apis/data_transforms/behavior_data_transforms.py:351: TypeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_running_speed" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api" name="test_get_running_speed_raises_index_error" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_stim_file_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:292: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_rewards_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:296: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_ophys_experiment_id_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:301: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_behavior_uuid_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:305: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_container_id_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:309: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_stimulus_frame_rate_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:313: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_running_speed_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:317: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_running_acquisition_df_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:326: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_stimulus_presentations_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:335: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_stimulus_template_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:342: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_task_parameters_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:357: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_trials_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:373: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_sex_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:385: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_equipment_name_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:388: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_stimulus_name_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:392: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_reporter_line_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:396: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_driver_line_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:400: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_external_specimen_name_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:404: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_full_genotype_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:408: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_lims_api.TestBehaviorRegression" name="test_get_date_of_acquisition_regression" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_lims_api.py:412: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_task_parameters[basic]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_task_parameters[single_value_blank_duration]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_task_parameters[stimulus_duration_from_grating]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_task_parameters[stimulus_duration_none]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_task_parameters_task_id_exception" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_task_parameters_flash_duration_exception" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[OPHYS_0_images_Z-A behavior training session performed on the 2-photon calcium imaging setup but without recording neural activity, with the goal of habituating the mouse to the experimental setup before commencing imaging of neural activity. Habituation sessions are change detection with the same image set on which the mouse was trained. The session is 75 minutes long, with 5 minutes of gray screen before and after 60 minutes of behavior, followed by 10 repeats of a 30 second natural movie stimulus at the end of the session.]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[OPHYS_1_images_A-2-photon calcium imaging in the visual cortex of the mouse brain as the mouse performs a visual change detection task with a set of natural images upon which it has been previously trained. Image stimuli are displayed for 250 ms with a 500 ms intervening gray period. 5% of non-change image presentations are randomly omitted. The session is 75 minutes long, with 5 minutes of gray screen before and after 60 minutes of behavior, followed by 10 repeats of a 30 second natural movie stimulus at the end of the session.]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[OPHYS_2_images_B-2-photon calcium imaging in the visual cortex of the mouse brain as the mouse is passively shown changes in natural scene images upon which it was previously trained as the change detection task is played in open loop mode, with the lick-response sensory withdrawn and the mouse is unable to respond to changes or receive reward feedback. Image stimuli are displayed for 250 ms with a 500 ms intervening gray period. 5% of non-change image presentations are randomly omitted. The session is 75 minutes long, with 5 minutes of gray screen before and after 60 minutes of behavior, followed by 10 repeats of a 30 second natural movie stimulus at the end of the session.]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[OPHYS_3_images_C-2-photon calcium imaging in the visual cortex of the mouse brain as the mouse performs a visual change detection task with a set of natural images upon which it has been previously trained. Image stimuli are displayed for 250 ms with a 500 ms intervening gray period. 5% of non-change image presentations are randomly omitted. The session is 75 minutes long, with 5 minutes of gray screen before and after 60 minutes of behavior, followed by 10 repeats of a 30 second natural movie stimulus at the end of the session.]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[OPHYS_4_images_D-2-photon calcium imaging in the visual cortex of the mouse brain as the mouse performs a visual change detection task with natural scene images that are unique from those on which the mouse was trained prior to the imaging phase of the experiment. Image stimuli are displayed for 250 ms with a 500 ms intervening gray period. 5% of non-change image presentations are randomly omitted. The session is 75 minutes long, with 5 minutes of gray screen before and after 60 minutes of behavior, followed by 10 repeats of a 30 second natural movie stimulus at the end of the session.]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[OPHYS_5_images_E-2-photon calcium imaging in the visual cortex of the mouse brain as the mouse is passively shown changes in natural scene images that are unique from those on which the mouse was trained prior to the imaging phase of the experiment. In this session, the change detection task is played in open loop mode, with the lick-response sensory withdrawn and the mouse is unable to respond to changes or receive reward feedback. Image stimuli are displayed for 250 ms with a 500 ms intervening gray period. 5% of non-change image presentations are randomly omitted. The session is 75 minutes long, with 5 minutes of gray screen before and after 60 minutes of behavior, followed by 10 repeats of a 30 second natural movie stimulus at the end of the session.]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[OPHYS_6_images_F-2-photon calcium imaging in the visual cortex of the mouse brain as the mouse performs a visual change detection task with natural scene images that are unique from those on which the mouse was trained prior to the imaging phase of the experiment. Image stimuli are displayed for 250 ms with a 500 ms intervening gray period. 5% of non-change image presentations are randomly omitted. The session is 75 minutes long, with 5 minutes of gray screen before and after 60 minutes of behavior, followed by 10 repeats of a 30 second natural movie stimulus at the end of the session.]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[TRAINING_0_gratings_A-An associative training session where a mouse is automatically rewarded when a grating stimulus changes orientation. Grating stimuli are  full-field, square-wave static gratings with a spatial frequency of 0.04 cycles per degree, with orientation changes between 0 and 90 degrees, at two spatial phases. Delivered rewards are 5ul in volume, and the session lasts for 15 minutes.]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[TRAINING_1_gratings_B-An operant behavior training session where a mouse must lick following a change in stimulus identity to earn rewards. Stimuli consist of  full-field, square-wave static gratings with a spatial frequency of 0.04 cycles per degree. Orientation changes between 0 and 90 degrees occur with no intervening gray period. Delivered rewards are 10ul in volume, and the session lasts 60 minutes]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[TRAINING_2_gratings_C-An operant behavior training session where a mouse must lick following a change in stimulus identity to earn rewards. Stimuli consist of full-field, square-wave static gratings with a spatial frequency of 0.04 cycles per degree. Gratings of 0 or 90 degrees are presented for 250 ms with a 500 ms intervening gray period. Delivered rewards are 10ul in volume, and the session lasts 60 minutes.]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[TRAINING_3_images_D-An operant behavior training session where a mouse must lick following a change in stimulus identity to earn rewards. Stimuli consist of 8 natural scene images, for a total of 64 possible pairwise transitions. Images are shown for 250 ms with a 500 ms intervening gray period. Delivered rewards are 10ul in volume, and the session lasts for 60 minutes]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[TRAINING_4_images_E-An operant behavior training session where a mouse must lick a spout following a change in stimulus identity to earn rewards. Stimuli consist of 8 natural scene images, for a total of 64 possible pairwise transitions. Images are shown for 250 ms with a 500 ms intervening gray period. Delivered rewards are 7ul in volume, and the session lasts for 60 minutes]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[TRAINING_3_images_A_10uL_reward-An operant behavior training session where a mouse must lick following a change in stimulus identity to earn rewards. Stimuli consist of 8 natural scene images, for a total of 64 possible pairwise transitions. Images are shown for 250 ms with a 500 ms intervening gray period. Delivered rewards are 10ul in volume, and the session lasts for 60 minutes]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_with_valid_session_type[TRAINING_5_images_A_handoff_lapsed-An operant behavior training session where a mouse must lick a spout following a change in stimulus identity to earn rewards. Stimuli consist of 8 natural scene images, for a total of 64 possible pairwise transitions. Images are shown for 250 ms with a 500 ms intervening gray period. Delivered rewards are 7ul in volume. The session is 75 minutes long, with 5 minutes of gray screen before and after 60 minutes of behavior, followed by 10 repeats of a 30 second natural movie stimulus at the end of the session.]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_raises_with_invalid_session_type[bogus_session_type]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_raises_with_invalid_session_type[stuff]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_expt_description_raises_with_invalid_session_type[OPHYS_7]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_cre_line" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_full_genotype'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99b7c810&gt;

    def test_cre_line(monkeypatch):
        """Tests that cre_line properly parsed from driver_line"""
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                pass
    
            def full_genotype(self):
                return 'Sst-IRES-Cre/wt;Ai148(TIT2L-GC6f-ICL-tTA2)/wt'
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
            ctx.setattr(BehaviorMetadata,
                        'full_genotype',
                        property(full_genotype))
    
            metadata = BehaviorMetadata()
    
&gt;           assert metadata.cre_line == 'Sst-IRES-Cre'

test_behavior_metadata.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99b7c7d0&gt;

    @property
    def cre_line(self) -&gt; Optional[str]:
&gt;       return self._full_genotype.parse_cre_line(warn=True)
E       AttributeError: 'BehaviorMetadata' object has no attribute '_full_genotype'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:326: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_cre_line_bad_full_genotype" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_full_genotype'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99ad5290&gt;

    def test_cre_line_bad_full_genotype(monkeypatch):
        """Test that cre_line is None and no error raised"""
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                pass
    
            def full_genotype(self):
                return 'foo'
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
            ctx.setattr(BehaviorMetadata,
                        'full_genotype',
                        property(full_genotype))
    
            metadata = BehaviorMetadata()
    
            with pytest.warns(UserWarning) as record:
&gt;               cre_line = metadata.cre_line

test_behavior_metadata.py:368: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99ad5390&gt;

    @property
    def cre_line(self) -&gt; Optional[str]:
&gt;       return self._full_genotype.parse_cre_line(warn=True)
E       AttributeError: 'BehaviorMetadata' object has no attribute '_full_genotype'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:326: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_reporter_line" time="0.000"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99b7c6d0&gt;

    def test_reporter_line(monkeypatch):
        """Test that reporter line properly parsed from list"""
    
        class MockExtractor:
            def get_reporter_line(self):
                return ['foo']
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata()
    
&gt;           assert metadata.reporter_line == 'foo'

test_behavior_metadata.py:393: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99b7c150&gt;

    @property
    def reporter_line(self) -&gt; Optional[str]:
&gt;       return self._reporter_line.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:314: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_reporter_line_str" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99add250&gt;

    def test_reporter_line_str(monkeypatch):
        """Test that reporter line returns itself if str"""
    
        class MockExtractor:
            def get_reporter_line(self):
                return 'foo'
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata()
    
&gt;           assert metadata.reporter_line == 'foo'

test_behavior_metadata.py:415: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99add510&gt;

    @property
    def reporter_line(self) -&gt; Optional[str]:
&gt;       return self._reporter_line.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:314: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_reporter_edge_cases[input_reporter_line0-More than 1 reporter line. Returning the first one-foo]" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99add390&gt;, input_reporter_line = ('foo', 'bar'), warning_msg = 'More than 1 reporter line. Returning the first one', expected = 'foo'

    @pytest.mark.parametrize("input_reporter_line, warning_msg, expected", (
            (('foo', 'bar'), 'More than 1 reporter line. '
                             'Returning the first one', 'foo'),
            (None, 'Error parsing reporter line. It is null.', None),
            ([], 'Error parsing reporter line. The array is empty', None)
    )
                             )
    def test_reporter_edge_cases(monkeypatch, input_reporter_line, warning_msg,
                                 expected):
        """Test reporter line edge cases"""
    
        class MockExtractor:
            def get_reporter_line(self):
                return input_reporter_line
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
            metadata = BehaviorMetadata()
    
            with pytest.warns(UserWarning) as record:
&gt;               reporter_line = metadata.reporter_line

test_behavior_metadata.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99add9d0&gt;

    @property
    def reporter_line(self) -&gt; Optional[str]:
&gt;       return self._reporter_line.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:314: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_reporter_edge_cases[None-Error parsing reporter line. It is null.-None]" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99add290&gt;, input_reporter_line = None, warning_msg = 'Error parsing reporter line. It is null.', expected = None

    @pytest.mark.parametrize("input_reporter_line, warning_msg, expected", (
            (('foo', 'bar'), 'More than 1 reporter line. '
                             'Returning the first one', 'foo'),
            (None, 'Error parsing reporter line. It is null.', None),
            ([], 'Error parsing reporter line. The array is empty', None)
    )
                             )
    def test_reporter_edge_cases(monkeypatch, input_reporter_line, warning_msg,
                                 expected):
        """Test reporter line edge cases"""
    
        class MockExtractor:
            def get_reporter_line(self):
                return input_reporter_line
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
            metadata = BehaviorMetadata()
    
            with pytest.warns(UserWarning) as record:
&gt;               reporter_line = metadata.reporter_line

test_behavior_metadata.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99a562d0&gt;

    @property
    def reporter_line(self) -&gt; Optional[str]:
&gt;       return self._reporter_line.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:314: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_reporter_edge_cases[input_reporter_line2-Error parsing reporter line. The array is empty-None]" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a56ed0&gt;, input_reporter_line = [], warning_msg = 'Error parsing reporter line. The array is empty', expected = None

    @pytest.mark.parametrize("input_reporter_line, warning_msg, expected", (
            (('foo', 'bar'), 'More than 1 reporter line. '
                             'Returning the first one', 'foo'),
            (None, 'Error parsing reporter line. It is null.', None),
            ([], 'Error parsing reporter line. The array is empty', None)
    )
                             )
    def test_reporter_edge_cases(monkeypatch, input_reporter_line, warning_msg,
                                 expected):
        """Test reporter line edge cases"""
    
        class MockExtractor:
            def get_reporter_line(self):
                return input_reporter_line
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
            metadata = BehaviorMetadata()
    
            with pytest.warns(UserWarning) as record:
&gt;               reporter_line = metadata.reporter_line

test_behavior_metadata.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99a6f150&gt;

    @property
    def reporter_line(self) -&gt; Optional[str]:
&gt;       return self._reporter_line.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:314: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_age_in_days" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_age'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a6ffd0&gt;

    def test_age_in_days(monkeypatch):
        """Test that age_in_days properly parsed from age"""
    
        class MockExtractor:
            def get_age(self):
                return 'P123'
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata()
    
&gt;           assert metadata.age_in_days == 123

test_behavior_metadata.py:470: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99a6ff10&gt;

    @property
    def age_in_days(self) -&gt; Optional[int]:
&gt;       return self._age.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_age'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:298: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_age_in_days_edge_cases[unkown-Could not parse numeric age from age code (age code does not start with &quot;P&quot;)-None]" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_age'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a6f910&gt;, input_age = 'unkown', warning_msg = 'Could not parse numeric age from age code (age code does not start with "P")', expected = None

    @pytest.mark.parametrize("input_age, warning_msg, expected", (
            ('unkown', 'Could not parse numeric age from age code '
                       '(age code does not start with "P")', None),
            ('P', 'Could not parse numeric age from age code '
                  '(no numeric values found in age code)', None)
    )
                             )
    def test_age_in_days_edge_cases(monkeypatch, input_age, warning_msg,
                                    expected):
        """Test age in days edge cases"""
    
        class MockExtractor:
            def get_age(self):
                return input_age
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata()
    
            with pytest.warns(UserWarning) as record:
&gt;               age_in_days = metadata.age_in_days

test_behavior_metadata.py:501: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99a6d750&gt;

    @property
    def age_in_days(self) -&gt; Optional[int]:
&gt;       return self._age.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_age'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:298: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_age_in_days_edge_cases[P-Could not parse numeric age from age code (no numeric values found in age code)-None]" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_age'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a6dd50&gt;, input_age = 'P', warning_msg = 'Could not parse numeric age from age code (no numeric values found in age code)', expected = None

    @pytest.mark.parametrize("input_age, warning_msg, expected", (
            ('unkown', 'Could not parse numeric age from age code '
                       '(age code does not start with "P")', None),
            ('P', 'Could not parse numeric age from age code '
                  '(no numeric values found in age code)', None)
    )
                             )
    def test_age_in_days_edge_cases(monkeypatch, input_age, warning_msg,
                                    expected):
        """Test age in days edge cases"""
    
        class MockExtractor:
            def get_age(self):
                return input_age
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata()
    
            with pytest.warns(UserWarning) as record:
&gt;               age_in_days = metadata.age_in_days

test_behavior_metadata.py:501: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99a6d110&gt;

    @property
    def age_in_days(self) -&gt; Optional[int]:
&gt;       return self._age.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_age'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:298: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_date_of_acquisition[test_params0-None]" time="0.013"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_date_of_acquisition'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a634d0&gt;, tmp_path = PosixPath('/tmp/pytest-of-adam.amster/pytest-0/test_get_date_of_acquisition_t0')
test_params = {'behavior_session_id': 1, 'extractor_expt_date': datetime.datetime(2021, 3, 14, 3, 14, 15), 'pkl_expt_date': datetime.datetime(2021, 3, 14, 3, 14, 15)}, expected_warn_msg = None

    @pytest.mark.parametrize("test_params, expected_warn_msg", [
        # Vanilla test case
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                "%Y-%m-%d %H:%M:%S"),
             "behavior_session_id": 1
         }, None),
    
        # pkl expt date stored in unix format
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": 1615716855.0,
             "behavior_session_id": 2
         }, None),
    
        # Extractor and pkl dates differ significantly
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": datetime.strptime("2021-03-14 20:14:15",
                                                "%Y-%m-%d %H:%M:%S"),
             "behavior_session_id": 3
         },
         "The `date_of_acquisition` field in LIMS *"),
    
        # pkl file contains an unparseable datetime
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": None,
             "behavior_session_id": 4
         },
         "Could not parse the acquisition datetime *"),
    ])
    def test_get_date_of_acquisition(monkeypatch, tmp_path, test_params,
                                     expected_warn_msg):
        mock_session_id = test_params["behavior_session_id"]
    
        pkl_save_path = tmp_path / f"mock_pkl_{mock_session_id}.pkl"
        with open(pkl_save_path, 'wb') as handle:
            pickle.dump({"start_time": test_params['pkl_expt_date']}, handle)
        behavior_stimulus_file = pd.read_pickle(pkl_save_path)
    
        tz = pytz.timezone("America/Los_Angeles")
        extractor_expt_date = tz.localize(
            test_params['extractor_expt_date']).astimezone(pytz.utc)
    
        class MockExtractor():
            def get_date_of_acquisition(self):
                return extractor_expt_date
    
            def get_behavior_session_id(self):
                return test_params['behavior_session_id']
    
            def get_behavior_stimulus_file(self):
                return pkl_save_path
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self, extractor, behavior_stimulus_file):
                self._extractor = extractor
                self._behavior_stimulus_file = behavior_stimulus_file
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata(
                extractor=extractor,
                behavior_stimulus_file=behavior_stimulus_file)
    
            if expected_warn_msg:
                with pytest.warns(Warning, match=expected_warn_msg):
                    obt_date = metadata.date_of_acquisition
            else:
&gt;               obt_date = metadata.date_of_acquisition

test_behavior_metadata.py:586: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fcf01f2b9d0&gt;

    @property
    def date_of_acquisition(self) -&gt; datetime:
&gt;       return self._date_of_acquisition.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_date_of_acquisition'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:310: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_date_of_acquisition[test_params1-None]" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_date_of_acquisition'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a84f90&gt;, tmp_path = PosixPath('/tmp/pytest-of-adam.amster/pytest-0/test_get_date_of_acquisition_t1')
test_params = {'behavior_session_id': 2, 'extractor_expt_date': datetime.datetime(2021, 3, 14, 3, 14, 15), 'pkl_expt_date': 1615716855.0}, expected_warn_msg = None

    @pytest.mark.parametrize("test_params, expected_warn_msg", [
        # Vanilla test case
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                "%Y-%m-%d %H:%M:%S"),
             "behavior_session_id": 1
         }, None),
    
        # pkl expt date stored in unix format
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": 1615716855.0,
             "behavior_session_id": 2
         }, None),
    
        # Extractor and pkl dates differ significantly
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": datetime.strptime("2021-03-14 20:14:15",
                                                "%Y-%m-%d %H:%M:%S"),
             "behavior_session_id": 3
         },
         "The `date_of_acquisition` field in LIMS *"),
    
        # pkl file contains an unparseable datetime
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": None,
             "behavior_session_id": 4
         },
         "Could not parse the acquisition datetime *"),
    ])
    def test_get_date_of_acquisition(monkeypatch, tmp_path, test_params,
                                     expected_warn_msg):
        mock_session_id = test_params["behavior_session_id"]
    
        pkl_save_path = tmp_path / f"mock_pkl_{mock_session_id}.pkl"
        with open(pkl_save_path, 'wb') as handle:
            pickle.dump({"start_time": test_params['pkl_expt_date']}, handle)
        behavior_stimulus_file = pd.read_pickle(pkl_save_path)
    
        tz = pytz.timezone("America/Los_Angeles")
        extractor_expt_date = tz.localize(
            test_params['extractor_expt_date']).astimezone(pytz.utc)
    
        class MockExtractor():
            def get_date_of_acquisition(self):
                return extractor_expt_date
    
            def get_behavior_session_id(self):
                return test_params['behavior_session_id']
    
            def get_behavior_stimulus_file(self):
                return pkl_save_path
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self, extractor, behavior_stimulus_file):
                self._extractor = extractor
                self._behavior_stimulus_file = behavior_stimulus_file
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata(
                extractor=extractor,
                behavior_stimulus_file=behavior_stimulus_file)
    
            if expected_warn_msg:
                with pytest.warns(Warning, match=expected_warn_msg):
                    obt_date = metadata.date_of_acquisition
            else:
&gt;               obt_date = metadata.date_of_acquisition

test_behavior_metadata.py:586: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99a84950&gt;

    @property
    def date_of_acquisition(self) -&gt; datetime:
&gt;       return self._date_of_acquisition.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_date_of_acquisition'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:310: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_date_of_acquisition[test_params2-The `date_of_acquisition` field in LIMS *]" time="0.002"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_date_of_acquisition'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a84fd0&gt;, tmp_path = PosixPath('/tmp/pytest-of-adam.amster/pytest-0/test_get_date_of_acquisition_t2')
test_params = {'behavior_session_id': 3, 'extractor_expt_date': datetime.datetime(2021, 3, 14, 3, 14, 15), 'pkl_expt_date': datetime.datetime(2021, 3, 14, 20, 14, 15)}, expected_warn_msg = 'The `date_of_acquisition` field in LIMS *'

    @pytest.mark.parametrize("test_params, expected_warn_msg", [
        # Vanilla test case
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                "%Y-%m-%d %H:%M:%S"),
             "behavior_session_id": 1
         }, None),
    
        # pkl expt date stored in unix format
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": 1615716855.0,
             "behavior_session_id": 2
         }, None),
    
        # Extractor and pkl dates differ significantly
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": datetime.strptime("2021-03-14 20:14:15",
                                                "%Y-%m-%d %H:%M:%S"),
             "behavior_session_id": 3
         },
         "The `date_of_acquisition` field in LIMS *"),
    
        # pkl file contains an unparseable datetime
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": None,
             "behavior_session_id": 4
         },
         "Could not parse the acquisition datetime *"),
    ])
    def test_get_date_of_acquisition(monkeypatch, tmp_path, test_params,
                                     expected_warn_msg):
        mock_session_id = test_params["behavior_session_id"]
    
        pkl_save_path = tmp_path / f"mock_pkl_{mock_session_id}.pkl"
        with open(pkl_save_path, 'wb') as handle:
            pickle.dump({"start_time": test_params['pkl_expt_date']}, handle)
        behavior_stimulus_file = pd.read_pickle(pkl_save_path)
    
        tz = pytz.timezone("America/Los_Angeles")
        extractor_expt_date = tz.localize(
            test_params['extractor_expt_date']).astimezone(pytz.utc)
    
        class MockExtractor():
            def get_date_of_acquisition(self):
                return extractor_expt_date
    
            def get_behavior_session_id(self):
                return test_params['behavior_session_id']
    
            def get_behavior_stimulus_file(self):
                return pkl_save_path
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self, extractor, behavior_stimulus_file):
                self._extractor = extractor
                self._behavior_stimulus_file = behavior_stimulus_file
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata(
                extractor=extractor,
                behavior_stimulus_file=behavior_stimulus_file)
    
            if expected_warn_msg:
                with pytest.warns(Warning, match=expected_warn_msg):
&gt;                   obt_date = metadata.date_of_acquisition

test_behavior_metadata.py:584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fcf01f2b910&gt;

    @property
    def date_of_acquisition(self) -&gt; datetime:
&gt;       return self._date_of_acquisition.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_date_of_acquisition'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:310: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_get_date_of_acquisition[test_params3-Could not parse the acquisition datetime *]" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_date_of_acquisition'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a4fe90&gt;, tmp_path = PosixPath('/tmp/pytest-of-adam.amster/pytest-0/test_get_date_of_acquisition_t3')
test_params = {'behavior_session_id': 4, 'extractor_expt_date': datetime.datetime(2021, 3, 14, 3, 14, 15), 'pkl_expt_date': None}, expected_warn_msg = 'Could not parse the acquisition datetime *'

    @pytest.mark.parametrize("test_params, expected_warn_msg", [
        # Vanilla test case
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                "%Y-%m-%d %H:%M:%S"),
             "behavior_session_id": 1
         }, None),
    
        # pkl expt date stored in unix format
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": 1615716855.0,
             "behavior_session_id": 2
         }, None),
    
        # Extractor and pkl dates differ significantly
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": datetime.strptime("2021-03-14 20:14:15",
                                                "%Y-%m-%d %H:%M:%S"),
             "behavior_session_id": 3
         },
         "The `date_of_acquisition` field in LIMS *"),
    
        # pkl file contains an unparseable datetime
        ({
             "extractor_expt_date": datetime.strptime("2021-03-14 03:14:15",
                                                      "%Y-%m-%d %H:%M:%S"),
             "pkl_expt_date": None,
             "behavior_session_id": 4
         },
         "Could not parse the acquisition datetime *"),
    ])
    def test_get_date_of_acquisition(monkeypatch, tmp_path, test_params,
                                     expected_warn_msg):
        mock_session_id = test_params["behavior_session_id"]
    
        pkl_save_path = tmp_path / f"mock_pkl_{mock_session_id}.pkl"
        with open(pkl_save_path, 'wb') as handle:
            pickle.dump({"start_time": test_params['pkl_expt_date']}, handle)
        behavior_stimulus_file = pd.read_pickle(pkl_save_path)
    
        tz = pytz.timezone("America/Los_Angeles")
        extractor_expt_date = tz.localize(
            test_params['extractor_expt_date']).astimezone(pytz.utc)
    
        class MockExtractor():
            def get_date_of_acquisition(self):
                return extractor_expt_date
    
            def get_behavior_session_id(self):
                return test_params['behavior_session_id']
    
            def get_behavior_stimulus_file(self):
                return pkl_save_path
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self, extractor, behavior_stimulus_file):
                self._extractor = extractor
                self._behavior_stimulus_file = behavior_stimulus_file
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata(
                extractor=extractor,
                behavior_stimulus_file=behavior_stimulus_file)
    
            if expected_warn_msg:
                with pytest.warns(Warning, match=expected_warn_msg):
&gt;                   obt_date = metadata.date_of_acquisition

test_behavior_metadata.py:584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99a4f490&gt;

    @property
    def date_of_acquisition(self) -&gt; datetime:
&gt;       return self._date_of_acquisition.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_date_of_acquisition'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:310: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_indicator" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a4f050&gt;

    def test_indicator(monkeypatch):
        """Test that indicator is parsed from full_genotype"""
    
        class MockExtractor:
            def get_reporter_line(self):
                return 'Ai148(TIT2L-GC6f-ICL-tTA2)'
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata()
    
&gt;           assert metadata.indicator == 'GCaMP6f'

test_behavior_metadata.py:610: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99a818d0&gt;

    @property
    def indicator(self) -&gt; Optional[str]:
&gt;       return self._reporter_line.indicator
E       AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:318: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_indicator_edge_cases[None-Error parsing reporter line. It is null.-None]" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a81b10&gt;, input_reporter_line = None, warning_msg = 'Error parsing reporter line. It is null.', expected = None

    @pytest.mark.parametrize("input_reporter_line, warning_msg, expected", (
            (None, 'Error parsing reporter line. It is null.', None),
            ('foo', 'Could not parse indicator from reporter because none'
                    'of the expected substrings were found in the reporter', None)
    )
                             )
    def test_indicator_edge_cases(monkeypatch, input_reporter_line, warning_msg,
                                  expected):
        """Test indicator parsing edge cases"""
    
        class MockExtractor:
            def get_reporter_line(self):
                return input_reporter_line
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata()
    
            with pytest.warns(UserWarning) as record:
&gt;               indicator = metadata.indicator

test_behavior_metadata.py:640: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99a815d0&gt;

    @property
    def indicator(self) -&gt; Optional[str]:
&gt;       return self._reporter_line.indicator
E       AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:318: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_metadata" name="test_indicator_edge_cases[foo-Could not parse indicator from reporter because noneof the expected substrings were found in the reporter-None]" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99ab1dd0&gt;, input_reporter_line = 'foo', warning_msg = 'Could not parse indicator from reporter because noneof the expected substrings were found in the reporter'
expected = None

    @pytest.mark.parametrize("input_reporter_line, warning_msg, expected", (
            (None, 'Error parsing reporter line. It is null.', None),
            ('foo', 'Could not parse indicator from reporter because none'
                    'of the expected substrings were found in the reporter', None)
    )
                             )
    def test_indicator_edge_cases(monkeypatch, input_reporter_line, warning_msg,
                                  expected):
        """Test indicator parsing edge cases"""
    
        class MockExtractor:
            def get_reporter_line(self):
                return input_reporter_line
    
        extractor = MockExtractor()
    
        with monkeypatch.context() as ctx:
            def dummy_init(self):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_init)
    
            metadata = BehaviorMetadata()
    
            with pytest.warns(UserWarning) as record:
&gt;               indicator = metadata.indicator

test_behavior_metadata.py:640: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce99ab1fd0&gt;

    @property
    def indicator(self) -&gt; Optional[str]:
&gt;       return self._reporter_line.indicator
E       AttributeError: 'BehaviorMetadata' object has no attribute '_reporter_line'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:318: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_data_xforms" name="test_get_roi_masks_by_cell_roi_id[1-expected0]" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_data_xforms" name="test_get_roi_masks_by_cell_roi_id[None-expected1]" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_data_xforms" name="test_get_rewards" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_data_xforms" name="test_get_licks" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_data_xforms" name="test_get_licks_excess" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_data_xforms" name="test_empty_licks" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_data_xforms" name="test_get_licks_failure" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_data_xforms" name="test_timestamps_and_delay" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_data_xforms" name="test_monitor_delay" time="0.001"><failure message="AttributeError: 'BehaviorMetadata' object has no attribute '_equipment_name'">self = &lt;allensdk.brain_observatory.behavior.session_apis.data_transforms.behavior_ophys_data_transforms.BehaviorOphysDataTransforms object at 0x7fce9b1abfd0&gt;

    def _load_stimulus_timestamps_and_delay(self):
        """
        Load the stimulus timestamps (uncorrected for
        monitor delay) and the monitor delay
        """
        sync_path = self.extractor.get_sync_file()
        aligner = OphysTimeAligner(sync_file=sync_path)
        (self._stimulus_timestamps,
         delta) = aligner.clipped_stim_timestamps
    
        try:
&gt;           delay = aligner.monitor_delay

../../../brain_observatory/behavior/session_apis/data_transforms/behavior_ophys_data_transforms.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.internal.brain_observatory.time_sync.OphysTimeAligner object at 0x7fce9b1ab350&gt;

    @property
    def monitor_delay(self):
        """
        The monitor delay (in seconds) associated with the session
        """
        if self._monitor_delay is None:
&gt;           self._monitor_delay = self._get_monitor_delay()

../../../internal/brain_observatory/time_sync.py:393: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.internal.brain_observatory.time_sync.OphysTimeAligner object at 0x7fce9b1ab350&gt;

    def dummy_delay(self):
&gt;       raise ValueError("that did not work")
E       ValueError: that did not work

test_behavior_ophys_data_xforms.py:431: ValueError

During handling of the above exception, another exception occurred:

monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fce99a6d6d0&gt;

    def test_monitor_delay(monkeypatch):
        """
        Check that BehaviorOphysDataTransforms can handle all
        edge cases of monitor delay calculation
        """
    
        # first test case where monitor delay calculation succeeds
        class DummyExtractor(object):
            def get_sync_file(self):
                return ''
    
            def get_equipment_name(self):
                return 'spam'
    
        def xform_init(self):
            self.extractor = DummyExtractor()
    
        def aligner_init(self, sync_file=None):
            self._monitor_delay = None
            self._clipped_stim_ts_delta = None
    
        def dummy_clipped(self):
            return np.array([1, 2, 3, 4, 5], dtype=int), -1
    
        def dummy_delay(self):
            return 1.12
    
        with monkeypatch.context() as ctx:
            ctx.setattr(BehaviorOphysDataTransforms,
                        '__init__',
                        xform_init)
    
            ctx.setattr(OphysTimeAligner,
                        '__init__',
                        aligner_init)
    
            ctx.setattr(OphysTimeAligner,
                        '_get_clipped_stim_timestamps',
                        dummy_clipped)
    
            ctx.setattr(OphysTimeAligner,
                        '_get_monitor_delay',
                        dummy_delay)
    
            xforms = BehaviorOphysDataTransforms()
            assert abs(xforms.get_monitor_delay() - 1.12) &lt; 1.0e-6
            np.testing.assert_array_equal(xforms.get_stimulus_timestamps(),
                                          np.array([1, 2, 3, 4, 5], dtype=int))
    
        # now try case where monitor delay fails, but value can
        # be looked up
        def dummy_delay(self):
            raise ValueError("that did not work")
    
        delay_lookup = {'CAM2P.1': 0.020842,
                        'CAM2P.2': 0.037566,
                        'CAM2P.3': 0.021390,
                        'CAM2P.4': 0.021102,
                        'CAM2P.5': 0.021192,
                        'MESO.1': 0.03613}
    
        def dummy_get_metadata(self):
            def dummy_metadata_init(self, extractor):
                self._extractor = extractor
    
            ctx.setattr(BehaviorMetadata,
                        '__init__',
                        dummy_metadata_init)
    
            class DummyExtractor:
                def get_sync_file(self):
                    return ''
    
                def get_equipment_name(self):
                    return equipment_name
    
            metadata = BehaviorMetadata(
                extractor=DummyExtractor())
            return metadata
    
        for equipment_name in delay_lookup.keys():
            expected_delay = delay_lookup[equipment_name]
    
            with monkeypatch.context() as ctx:
                ctx.setattr(BehaviorOphysDataTransforms,
                            '__init__',
                            xform_init)
    
                ctx.setattr(BehaviorOphysDataTransforms,
                            'get_metadata',
                            dummy_get_metadata)
    
                ctx.setattr(OphysTimeAligner,
                            '__init__',
                            aligner_init)
    
                ctx.setattr(OphysTimeAligner,
                            '_get_clipped_stim_timestamps',
                            dummy_clipped)
    
                ctx.setattr(OphysTimeAligner,
                            '_get_monitor_delay',
                            dummy_delay)
    
                xforms = BehaviorOphysDataTransforms()
                with pytest.warns(UserWarning):
&gt;                   m = xforms.get_monitor_delay()

test_behavior_ophys_data_xforms.py:485: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../brain_observatory/behavior/session_apis/data_transforms/behavior_ophys_data_transforms.py:207: in get_monitor_delay
    self._load_stimulus_timestamps_and_delay()
../../../brain_observatory/behavior/session_apis/data_transforms/behavior_ophys_data_transforms.py:165: in _load_stimulus_timestamps_and_delay
    equipment_name = self.get_metadata().equipment_name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.data_objects.metadata.behavior_metadata.behavior_metadata.BehaviorMetadata object at 0x7fce9b22c810&gt;

    @property
    def equipment_name(self) -&gt; str:
&gt;       return self._equipment_name.value
E       AttributeError: 'BehaviorMetadata' object has no attribute '_equipment_name'

../../../brain_observatory/behavior/data_objects/metadata/behavior_metadata/behavior_metadata.py:290: AttributeError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_session_from_json[&lt;lambda&gt;-&lt;lambda&gt;0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:22: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_session_from_json[&lt;lambda&gt;-&lt;lambda&gt;1]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:22: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_nwb_end_to_end" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:43: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_visbeh_ophys_data_set" time="0.000"><skipped message="this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds)." type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:62: this test is either time/memory/compute expensive or it depends on resources internal to the Allen Institute. Either way, it does'nt run by default and must be opted into (it does run in our nightly builds).</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_legacy_dff_api" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:144: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_stimulus_presentations_omitted[789359614-153]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:159: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_stimulus_presentations_omitted[792813858-129]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:159: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_trial_response_window_bounds_reward[789359614]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:170: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_trial_response_window_bounds_reward[792813858]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:170: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_eye_tracking[5-9-None]" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_eye_tracking[1-2-None]" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_eye_tracking[3-3-eye_tracking_start_value2]" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_event_detection" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:223: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_BehaviorOphysExperiment_property_data" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_experiment.py:246: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_experiment" name="test_behavior_ophys_experiment_list_data_attributes_and_methods" time="0.002"><failure message="AssertionError: assert True is False&#10; +  where True = any(({'average_projection', 'behavior_session_id', 'cell_specimen_table', 'corrected_fluorescence_traces', 'dff_traces', 'events', ...} ^ {'average_projection', 'behavior_session_id', 'cell_specimen_table', 'corrected_fluorescence_traces', 'dff_traces', 'events', ...}))&#10; +    where {'average_projection', 'behavior_session_id', 'cell_specimen_table', 'corrected_fluorescence_traces', 'dff_traces', 'events', ...} = set(['average_projection', 'behavior_session_id', 'cell_specimen_table', 'corrected_fluorescence_traces', 'dff_traces', 'events', ...])">def test_behavior_ophys_experiment_list_data_attributes_and_methods():
        # Test that data related methods/attributes/properties for
        # BehaviorOphysExperiment are returned properly.
    
        # This test will need to be updated if:
        # 1. Data being returned by class has changed
        # 2. Inheritance of class has changed
        expected = {
            'average_projection',
            'behavior_session_id',
            'cell_specimen_table',
            'corrected_fluorescence_traces',
            'dff_traces',
            'events',
            'eye_tracking',
            'eye_tracking_rig_geometry',
            'get_cell_specimen_ids',
            'get_cell_specimen_indices',
            'get_dff_traces',
            'get_performance_metrics',
            'get_reward_rate',
            'get_rolling_performance_df',
            'get_segmentation_mask_image',
            'licks',
            'max_projection',
            'metadata',
            'motion_correction',
            'ophys_experiment_id',
            'ophys_session_id',
            'ophys_timestamps',
            'raw_running_speed',
            'rewards',
            'roi_masks',
            'running_speed',
            'segmentation_mask_image',
            'stimulus_presentations',
            'stimulus_templates',
            'stimulus_timestamps',
            'task_parameters',
            'trials'
        }
    
        behavior_ophys_experiment = BehaviorOphysExperiment(api=MagicMock())
        obt = behavior_ophys_experiment.list_data_attributes_and_methods()
    
&gt;       assert any(expected ^ set(obt)) is False
E       AssertionError: assert True is False
E        +  where True = any(({'average_projection', 'behavior_session_id', 'cell_specimen_table', 'corrected_fluorescence_traces', 'dff_traces', 'events', ...} ^ {'average_projection', 'behavior_session_id', 'cell_specimen_table', 'corrected_fluorescence_traces', 'dff_traces', 'events', ...}))
E        +    where {'average_projection', 'behavior_session_id', 'cell_specimen_table', 'corrected_fluorescence_traces', 'dff_traces', 'events', ...} = set(['average_projection', 'behavior_session_id', 'cell_specimen_table', 'corrected_fluorescence_traces', 'dff_traces', 'events', ...])

test_behavior_ophys_experiment.py:300: AssertionError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_get_cell_roi_table[511458874]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_lims_api.py:27: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_get_behavior_stimulus_file[789359614-/allen/programs/braintv/production/visualbehavior/prod0/specimen_756577249/behavior_session_789295700/789220000.pkl]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_lims_api.py:36: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_get_behavior_stimulus_file[0-None]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_lims_api.py:36: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_get_extended_trials[789359614]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_lims_api.py:59: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_get_nwb_filepath[860030092]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_lims_api.py:82: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_process_ophys_plane_timestamps[timestamps0-1-0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_process_ophys_plane_timestamps[timestamps1-1-0-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_process_ophys_plane_timestamps[timestamps2-1-3-expected2]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_process_ophys_plane_timestamps[timestamps3-0-4-expected3]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_process_ophys_plane_timestamps[timestamps4-1-2-expected4]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_process_ophys_plane_timestamps[timestamps5-0-1-expected5]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_get_ophys_timestamps[scientifica-truncate]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_get_ophys_timestamps[scientifica-raise]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_get_ophys_timestamps[mesoscope-good]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_get_ophys_timestamps[mesoscope-raise]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_dff_trace_order" time="0.025" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_dff_trace_exceptions" time="0.008" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_corrected_fluorescence_trace_order" time="0.015" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_corrected_fluorescence_trace_exceptions" time="0.006" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_corrected_fluorescence_trace_exceptions2" time="0.005" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_eye_tracking_rig_geometry_returns_single_rig" time="0.032" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_ophys_lims_api" name="test_rig_geometry_newer_than_experiment" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_behavior_ophys_lims_api.py:447: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_session.TestBehaviorSession" name="test_list_api_methods" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_session.TestBehaviorSession" name="test_cache_clear_raises_warning" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_session.TestBehaviorSession" name="test_cache_clear_no_warning" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_behavior_session" name="test_behavior_session_list_data_attributes_and_methods" time="0.001"><failure message="AssertionError: assert True is False&#10; +  where True = any(({'behavior_session_id', 'get_performance_metrics', 'get_reward_rate', 'get_rolling_performance_df', 'licks', 'metadata', ...} ^ {'behavior_session_id', 'from_internal_mixed', 'from_nwb', 'get_performance_metrics', 'get_reward_rate', 'get_rolling_performance_df', ...}))&#10; +    where {'behavior_session_id', 'from_internal_mixed', 'from_nwb', 'get_performance_metrics', 'get_reward_rate', 'get_rolling_performance_df', ...} = set(['behavior_session_id', 'from_internal_mixed', 'from_nwb', 'get_performance_metrics', 'get_reward_rate', 'get_rolling_performance_df', ...])">def test_behavior_session_list_data_attributes_and_methods():
        # Test that data related methods/attributes/properties for
        # BehaviorSession are returned properly.
    
        # This test will need to be updated if:
        # 1. Data being returned by class has changed
        # 2. Inheritance of class has changed
        expected = {
            'behavior_session_id',
            'get_performance_metrics',
            'get_reward_rate',
            'get_rolling_performance_df',
            'licks',
            'metadata',
            'raw_running_speed',
            'rewards',
            'running_speed',
            'stimulus_presentations',
            'stimulus_templates',
            'stimulus_timestamps',
            'task_parameters',
            'trials'
        }
    
        behavior_session = BehaviorSession(api=MagicMock())
        obt = behavior_session.list_data_attributes_and_methods()
    
&gt;       assert any(expected ^ set(obt)) is False
E       AssertionError: assert True is False
E        +  where True = any(({'behavior_session_id', 'get_performance_metrics', 'get_reward_rate', 'get_rolling_performance_df', 'licks', 'metadata', ...} ^ {'behavior_session_id', 'from_internal_mixed', 'from_nwb', 'get_performance_metrics', 'get_reward_rate', 'get_rolling_performance_df', ...}))
E        +    where {'behavior_session_id', 'from_internal_mixed', 'from_nwb', 'get_performance_metrics', 'get_reward_rate', 'get_rolling_performance_df', ...} = set(['behavior_session_id', 'from_internal_mixed', 'from_nwb', 'get_performance_metrics', 'get_reward_rate', 'get_rolling_performance_df', ...])

test_behavior_session.py:99: AssertionError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_two_out_of_three_aint_bad[session_summary0-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_two_out_of_three_aint_bad[session_summary1-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_two_out_of_three_aint_bad[session_summary2-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_two_out_of_three_aint_bad[session_summary3-True]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_two_out_of_three_aint_bad_exception[session_summary0-expected0]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_two_out_of_three_aint_bad_exception[session_summary1-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_yesterday_was_good[session_summary0-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_yesterday_was_good[session_summary1-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_yesterday_was_good[session_summary2-False]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_yesterday_was_good[session_summary3-True]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_yesterday_was_good_exception[session_summary0-expected0]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_yesterday_was_good_exception[session_summary1-expected1]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_no_response_bias[session_summary0-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_no_response_bias[session_summary1-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_no_response_bias[session_summary2-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_no_response_bias[session_summary3-True]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_no_response_bias[session_summary4-True]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_no_response_bias[session_summary5-True]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_no_response_bias[session_summary6-True]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_no_response_bias_exception[session_summary0-expected0]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_no_response_bias_exception[session_summary1-expected1]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_whole_lotta_trials[session_summary0-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_whole_lotta_trials[session_summary1-False]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_whole_lotta_trials[session_summary2-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_whole_lotta_trials[session_summary3-True]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_whole_lotta_trials_exception[session_summary0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_whole_lotta_trials_exception[session_summary1-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_mostly_useful[trials0-True]" time="0.183" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_mostly_useful[trials1-False]" time="0.009" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_mostly_useful[trials2-False]" time="0.009" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_mostly_useful[trials3-False]" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_meets_engagement_criteria[session_summary0-False]" time="0.005" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_meets_engagement_criteria[session_summary1-False]" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_meets_engagement_criteria[session_summary2-True]" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_meets_engagement_criteria_exception[session_summary0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_meets_engagement_criteria_exception[session_summary1-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_summer_over[trials0-False]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_summer_over[trials1-True]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_criteria" name="test_summer_over[trials2-True]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_dprime" name="test_get_hit_rate" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_dprime" name="test_get_false_alarm_rate" time="0.088" /><testcase classname="allensdk.test.brain_observatory.behavior.test_dprime" name="test_rolling_dprime_unit" time="0.004" /><testcase classname="allensdk.test.brain_observatory.behavior.test_dprime" name="test_rolling_dprime_integration_legacy" time="0.335" /><testcase classname="allensdk.test.brain_observatory.behavior.test_dprime" name="test_rolling_dprime_integration" time="0.348" /><testcase classname="allensdk.test.brain_observatory.behavior.test_dprime" name="test_dprime[1.0-1.0-0.0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_dprime" name="test_dprime[0.5-0.5-0.0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_dprime" name="test_dprime[0.25-0.5--0.6744897501960817]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_dprime" name="test_dprime[0.5-0.25-0.6744897501960817]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_event_detection" name="test_filter_events_array" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_load_eye_tracking_hdf[hdf_fixture0-expected0]" time="0.957" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_load_eye_tracking_hdf[hdf_fixture1-expected1]" time="0.025" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_determine_outliers[data_df0-2.5-expected0]" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_determine_outliers[data_df1-2.0-expected1]" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_compute_circular_area[df_row0-28.274333882308138]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_compute_circular_area[df_row1-28.274333882308138]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_compute_elliptical_area[df_row0-18.84955592153876]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_compute_elliptical_area[df_row1-18.84955592153876]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_determine_likely_blinks[eye_areas0-pupil_areas0-outliers0-2-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_determine_likely_blinks[eye_areas1-pupil_areas1-outliers1-1-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_determine_likely_blinks[eye_areas2-pupil_areas2-outliers2-0-expected2]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_process_eye_tracking_data_raises_on_sync_error[eye_tracking_df0-frame_times0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_process_eye_tracking_data_truncation[eye_tracking_df0-frame_times0]" time="0.010" /><testcase classname="allensdk.test.brain_observatory.behavior.test_eye_tracking_processing" name="test_process_eye_tracking_data[eye_tracking_df0-frame_times0-expected0]" time="0.014" /><testcase classname="allensdk.test.brain_observatory.behavior.test_get_trial_methods" name="test_behavior_get_trials" time="3.963" /><testcase classname="allensdk.test.brain_observatory.behavior.test_get_trial_methods" name="test_behavior_ophys_get_trials" time="4.026" /><testcase classname="allensdk.test.brain_observatory.behavior.test_mtrain_annotate" name="test_annotate_change_detect" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_ophys_experiment_dir[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:64: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_ophys_experiment_dir[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:64: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_demix_file[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:76: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_demix_file[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:76: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_maxint_file[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:88: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_maxint_file[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:88: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_average_intensity_projection_image[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:100: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_average_intensity_projection_image[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:100: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_rigid_motion_transform_file[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:112: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_rigid_motion_transform_file[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:112: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_targeted_structure[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:124: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_targeted_structure[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:124: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_imaging_depth[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:136: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_imaging_depth[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:136: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_stimulus_name[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:148: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_stimulus_name[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:148: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_reporter_line[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:160: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_reporter_line[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:160: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_driver_line[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:172: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_driver_line[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:172: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_mouse_ID[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:184: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_mouse_ID[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:184: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_full_genotype[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:196: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_full_genotype[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:196: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_workflow_state[702134928]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:208: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_workflow_state[0]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:208: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_nwb_filepath[511458874-/allen/programs/braintv/production/neuralcoding/prod6/specimen_503292442/ophys_experiment_511458874/511458874.nwb]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:220: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_nwb_filepath[0-None]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:220: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_ophys_segmentation_run_id[511458874]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:241: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_surface_2p_pixel_size_um[511458874-0.785203]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:250: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_surface_2p_pixel_size_um[0-None]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:250: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_sex[842510825-M]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:268: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_sex[0-None]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:268: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_age[842510825-P157]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:286: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_ophys_lims_api" name="test_get_age[0-None]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_ophys_lims_api.py:286: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_prior_exposure_count_processing" name="test_prior_exposure_to_session_type" time="0.005" /><testcase classname="allensdk.test.brain_observatory.behavior.test_prior_exposure_count_processing" name="test_prior_exposure_to_image_set" time="0.006" /><testcase classname="allensdk.test.brain_observatory.behavior.test_prior_exposure_count_processing" name="test_prior_exposure_to_omissions" time="0.008" /><testcase classname="allensdk.test.brain_observatory.behavior.test_rewards_processing" name="test_get_rewards" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_session_metrics" name="test_response_bias[trials0-detect-trial_types0-0.75]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_session_metrics" name="test_response_bias[trials1-detect-trial_types1-0.5]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_session_metrics" name="test_response_bias[trials2-detect-trial_types2-0.8]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_session_metrics" name="test_response_bias[trials3-detect-trial_types3-nan]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_session_metrics" name="test_num_contingent_trials[trials0-4]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_session_metrics" name="test_num_contingent_trials[trials1-3]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_session_metrics" name="test_num_contingent_trials[trials2-1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_session_metrics" name="test_num_contingent_trials[trials3-0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_session_metrics" name="test_num_contingent_trials[trials4-0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_stimulus_epoch[behavior_stimuli_data_fixture0-0-0-18-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_stimulus_epoch[behavior_stimuli_data_fixture1-2-11-18-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_draw_epochs[behavior_stimuli_data_fixture0-0-6-expected0-images]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_draw_epochs[behavior_stimuli_data_fixture1-0-11-expected1-images]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_draw_epochs[behavior_stimuli_data_fixture2-0-22-expected2-images]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_draw_epochs[behavior_stimuli_data_fixture3-0-6-expected3-grating]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_draw_epochs[behavior_stimuli_data_fixture4-6-11-expected4-grating]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_stimulus_templates[behavior_stimuli_data_fixture0]" time="5.095" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_stimulus_templates_for_gratings[behavior_stimuli_data_fixture0-grating_images_dict0-expected0]" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_gratings_metadata[behavior_stimuli_data_fixture0-remove_stimuli0-0-expected_metadata0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_gratings_metadata[behavior_stimuli_data_fixture1-remove_stimuli1-0-expected_metadata1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_gratings_metadata[behavior_stimuli_data_fixture2-remove_stimuli2-0-expected_metadata2]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_gratings_metadata[behavior_stimuli_data_fixture3-remove_stimuli3-12-expected_metadata3]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_gratings_metadata[behavior_stimuli_data_fixture4-remove_stimuli4-0-expected_metadata4]" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_gratings_metadata[behavior_stimuli_data_fixture5-remove_stimuli5-0-expected_metadata5]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_stimulus_metadata[behavior_stimuli_data_fixture0-remove_stimuli0-expected_metadata0]" time="0.007" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_stimulus_metadata[behavior_stimuli_data_fixture1-remove_stimuli1-expected_metadata1]" time="0.007" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_stimulus_presentations[behavior_stimuli_time_fixture0-behavior_stimuli_data_fixture0-expected0]" time="0.007" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_visual_stimuli_df[behavior_stimuli_time_fixture0-behavior_stimuli_data_fixture0-expected_data0]" time="0.005" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_get_visual_stimuli_df[behavior_stimuli_time_fixture1-behavior_stimuli_data_fixture1-expected_data1]" time="0.005" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_is_change_event_no_change" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_is_change_event_all_change" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_is_change_omission" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_stimulus_processing" name="test_is_change_mult_omission" time="0.002" /><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_extra_trials_columns" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:21: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_extra_stimulus_presentation_columns" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:28: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_stimulus_presentations_image_set" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:42: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_stimulus_templates" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:49: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_session_trial_response[mean_response-0.0053334]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:58: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_session_trial_response[baseline_response--0.0020357]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:58: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_session_trial_response[p_value-0.6478659]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:58: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_session_flash_response[time_from_last_lick-7.3577]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:70: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_session_flash_response[mean_running_speed-22.143871]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:70: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_session_flash_response[duration-0.25024]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:70: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_analysis_files_metadata" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:82: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_session_image_loading" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:90: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_no_invalid_rois" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:96: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_get_container_sessions" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:103: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_binarized_segmentation_mask_image" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:113: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_no_nan_flash_running_speed" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:123: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_licks_correct_colname" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:129: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_rewards_correct_colname" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:135: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_swdb_behavior_project_cache" name="test_dff_traces_correct_colname" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_swdb_behavior_project_cache.py:141: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_get_time_sync_integration[/allen/programs/braintv/production/visualbehavior/prod0/specimen_789992909/ophys_session_819949602/819949602_sync.h5-ophys_frames-140082-4530.11659]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_sync_processing.py:24: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_get_time_sync_integration[/allen/programs/braintv/production/visualbehavior/prod0/specimen_789992909/ophys_session_819949602/819949602_sync.h5-lick_times-2099-3860.94482]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_sync_processing.py:24: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_get_time_sync_integration[/allen/programs/braintv/production/visualbehavior/prod0/specimen_789992909/ophys_session_819949602/819949602_sync.h5-ophys_trigger-1-6.8612]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_sync_processing.py:24: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_get_time_sync_integration[/allen/programs/braintv/production/visualbehavior/prod0/specimen_789992909/ophys_session_819949602/819949602_sync.h5-eye_tracking-135908-4531.00479]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_sync_processing.py:24: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_get_time_sync_integration[/allen/programs/braintv/production/visualbehavior/prod0/specimen_789992909/ophys_session_819949602/819949602_sync.h5-behavior_monitoring-135887-4530.19092]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_sync_processing.py:24: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_get_time_sync_integration[/allen/programs/braintv/production/visualbehavior/prod0/specimen_789992909/ophys_session_819949602/819949602_sync.h5-stim_photodiode-4512-4510.80997]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_sync_processing.py:24: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_get_time_sync_integration[/allen/programs/braintv/production/visualbehavior/prod0/specimen_789992909/ophys_session_819949602/819949602_sync.h5-stimulus_times_no_delay-269977-4510.25654]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_sync_processing.py:24: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_trigger-foo-None-None-None]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_trigger-2p_trigger-rise1-fall1-expect1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_trigger-acq_trigger-rise2-fall2-expect2]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_eye_tracking-cam2_exposure-rise3-fall3-expect3]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_eye_tracking-eye_tracking-rise4-fall4-expect4]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_behavior_monitoring-cam1_exposure-rise5-fall5-expect5]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_behavior_monitoring-behavior_monitoring-rise6-fall6-expect6]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_stim_photodiode-stim_photodiode-rise7-fall7-expect7]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_stim_photodiode-photodiode-rise8-fall8-expect8]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_lick_times-lick_times-rise9-fall9-expect9]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_lick_times-lick_sensor-rise10-fall10-expect10]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_ophys_frames-2p_vsync-rise11-fall11-expect11]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_sync_processing" name="test_timestamp_extractors[get_raw_stimulus_frames-stim_vsync-rise12-fall12-expect12]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_trial_types[trials0-trial_types0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_trial_types[trials1-trial_types1-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_trial_types[trials2-trial_types2-expected2]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_trial_types[trials3-trial_types3-expected3]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_trial_types[trials4-trial_types4-expected4]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_trial_types_works_with_subselection[trials0-trial_types0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_contingent_trials[trials0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_contingent_trials[trials1-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_reward_rate[trials0--1.0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_reward_rate[trials1-1.0-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trial_masks" name="test_reward_rate[trials2-3.0-expected2]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_ori_info_from_trial[880293569-5-expected0-None]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_trials_processing.py:11: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_ori_info_from_trial[881236761-0-None-IndexError]" time="0.000"><skipped message="this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly" type="pytest.skip">/home/adam.amster/AllenSDK/allensdk/test/brain_observatory/behavior/test_trials_processing.py:11: this test depends on the resources only available to Bamboo agents, but are still fast.  If they are slow, mark with nightly</skipped></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_calculate_reward_rate[kwargs0-expected0]" time="0.102" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_calculate_reward_rate[kwargs1-expected1]" time="0.101" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_trial_data_from_log[trial_data_and_expectation_0]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_trial_data_from_log[trial_data_and_expectation_1]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_trial_data_from_log[trial_data_and_expectation_2]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_timing_exclusivity_assertions[False-False-False-True-False-True-'aborted' trials cannot be]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_timing_exclusivity_assertions[False-False-False-False-True-True-'aborted' trials cannot be]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_timing_exclusivity_assertions[False-False-True-False-False-True-'aborted' trials cannot be]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_timing_exclusivity_assertions[False-False-False-True-True-False-both `hit` and `false_alarm` cannot be True]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_timing_exclusivity_assertions[True-True-False-False-False-False-both `go` and `catch` cannot be True]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_timing_exclusivity_assertions[True-False-True-False-False-False-both `go` and `auto_rewarded` cannot be True]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_timing" time="0.003" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_response_time[licks0-True-nan]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_response_time[licks1-False-1.0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_response_time[licks2-True-nan]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_response_time[licks3-False-nan]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_resolve_initial_image[behavior_stimuli_data_fixture0-0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_resolve_initial_image[behavior_stimuli_data_fixture1-0-expected1]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_resolve_initial_image[behavior_stimuli_data_fixture2-0-expected2]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_image_names[behavior_stimuli_data_fixture0-trial0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_image_names[behavior_stimuli_data_fixture1-trial1-expected1]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_image_names[behavior_stimuli_data_fixture2-trial2-expected2]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_bounds[trial_log0-expected0]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_bounds[trial_log1-expected1]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_bounds_exception" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_get_trial_bounds_order_exceptions[trial_log0]" time="0.000" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_input_validation" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_calculate_response_latency_list[trials0-0.0-expected0]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_calculate_response_latency_list[trials1-0.0-expected1]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_calculate_response_latency_list[trials2-0.15-expected2]" time="0.001" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_construct_rolling_performance_df[OPHYS_5_images_B_passive]" time="0.008" /><testcase classname="allensdk.test.brain_observatory.behavior.test_trials_processing" name="test_construct_rolling_performance_df[OPHYS_5_images_B]" time="0.009" /><testcase classname="allensdk.test.brain_observatory.behavior.test_write_behavior_nwb" name="test_add_running_acquisition_to_nwbfile[True]" time="0.448"><failure message="NotImplementedError">nwbfile = root pynwb.file.NWBFile at 0x140525322581840
Fields:
  acquisition: {
    v_in &lt;class 'pynwb.base.TimeSeries'&gt;,
    v_...n
  session_start_time: 2021-06-04 07:15:24.143189-07:00
  timestamps_reference_time: 2021-06-04 07:15:24.143189-07:00

roundtrip = True, roundtripper = &lt;function roundtripper.&lt;locals&gt;.f at 0x7fce8e1ed950&gt;
running_acquisition_df_fixture =             dx  v_sig  v_in
timestamps                 
1.0          1      1     1
2.0          1      1     1
3.0          1      1     1

    @pytest.mark.parametrize('roundtrip', [True, False])
    def test_add_running_acquisition_to_nwbfile(nwbfile, roundtrip, roundtripper,
                                                running_acquisition_df_fixture):
        nwbfile = nwb.add_running_acquisition_to_nwbfile(
            nwbfile, running_acquisition_df_fixture)
    
        if roundtrip:
            obt = roundtripper(nwbfile, BehaviorNwbApi)
        else:
            obt = BehaviorNwbApi.from_nwbfile(nwbfile)
    
&gt;       obt_running_acq_df = obt.get_running_acquisition_df()

test_write_behavior_nwb.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.session_apis.data_io.behavior_nwb_api.BehaviorNwbApi object at 0x7fce9b326140&gt;

    def get_running_acquisition_df(self):
&gt;       raise NotImplementedError()
E       NotImplementedError

../../../brain_observatory/behavior/session_apis/data_io/behavior_nwb_api.py:121: NotImplementedError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_write_behavior_nwb" name="test_add_running_acquisition_to_nwbfile[False]" time="0.002"><failure message="NotImplementedError">nwbfile = root pynwb.file.NWBFile at 0x140525180967888
Fields:
  acquisition: {
    v_in &lt;class 'pynwb.base.TimeSeries'&gt;,
    v_...n
  session_start_time: 2021-06-04 07:15:24.611157-07:00
  timestamps_reference_time: 2021-06-04 07:15:24.611157-07:00

roundtrip = False, roundtripper = &lt;function roundtripper.&lt;locals&gt;.f at 0x7fce92606440&gt;
running_acquisition_df_fixture =             dx  v_sig  v_in
timestamps                 
1.0          1      1     1
2.0          1      1     1
3.0          1      1     1

    @pytest.mark.parametrize('roundtrip', [True, False])
    def test_add_running_acquisition_to_nwbfile(nwbfile, roundtrip, roundtripper,
                                                running_acquisition_df_fixture):
        nwbfile = nwb.add_running_acquisition_to_nwbfile(
            nwbfile, running_acquisition_df_fixture)
    
        if roundtrip:
            obt = roundtripper(nwbfile, BehaviorNwbApi)
        else:
            obt = BehaviorNwbApi.from_nwbfile(nwbfile)
    
&gt;       obt_running_acq_df = obt.get_running_acquisition_df()

test_write_behavior_nwb.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.session_apis.data_io.behavior_nwb_api.BehaviorNwbApi object at 0x7fce92602cd0&gt;

    def get_running_acquisition_df(self):
&gt;       raise NotImplementedError()
E       NotImplementedError

../../../brain_observatory/behavior/session_apis/data_io/behavior_nwb_api.py:121: NotImplementedError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_write_behavior_nwb" name="test_add_running_speed_to_nwbfile[True]" time="0.498"><failure message="NotImplementedError">nwbfile = root pynwb.file.NWBFile at 0x140525180557392
Fields:
  file_create_date: [datetime.datetime(2021, 6, 4, 7, 15, 24, 622...n
  session_start_time: 2021-06-04 07:15:24.621814-07:00
  timestamps_reference_time: 2021-06-04 07:15:24.621814-07:00

running_speed = RunningSpeed(timestamps=[1.0, 2.0, 3.0], values=[4, 5, 6]), roundtrip = True, roundtripper = &lt;function roundtripper.&lt;locals&gt;.f at 0x7fce926065f0&gt;

    @pytest.mark.parametrize('roundtrip', [True, False])
    def test_add_running_speed_to_nwbfile(nwbfile, running_speed,
                                          roundtrip, roundtripper):
    
        nwbfile = nwb.add_running_speed_to_nwbfile(nwbfile, running_speed)
    
        if roundtrip:
            obt = roundtripper(nwbfile, BehaviorNwbApi)
        else:
            obt = BehaviorNwbApi.from_nwbfile(nwbfile)
    
&gt;       obt_running_speed = obt.get_running_speed()

test_write_behavior_nwb.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.session_apis.data_io.behavior_nwb_api.BehaviorNwbApi object at 0x7fce925f48c0&gt;

    def get_running_speed(self):
&gt;       raise NotImplementedError()
E       NotImplementedError

../../../brain_observatory/behavior/session_apis/data_io/behavior_nwb_api.py:124: NotImplementedError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_write_behavior_nwb" name="test_add_running_speed_to_nwbfile[False]" time="0.001"><failure message="NotImplementedError">nwbfile = root pynwb.file.NWBFile at 0x140525180835984
Fields:
  file_create_date: [datetime.datetime(2021, 6, 4, 7, 15, 25, 126...n
  session_start_time: 2021-06-04 07:15:25.126058-07:00
  timestamps_reference_time: 2021-06-04 07:15:25.126058-07:00

running_speed = RunningSpeed(timestamps=[1.0, 2.0, 3.0], values=[4, 5, 6]), roundtrip = False, roundtripper = &lt;function roundtripper.&lt;locals&gt;.f at 0x7fce8e1edb90&gt;

    @pytest.mark.parametrize('roundtrip', [True, False])
    def test_add_running_speed_to_nwbfile(nwbfile, running_speed,
                                          roundtrip, roundtripper):
    
        nwbfile = nwb.add_running_speed_to_nwbfile(nwbfile, running_speed)
    
        if roundtrip:
            obt = roundtripper(nwbfile, BehaviorNwbApi)
        else:
            obt = BehaviorNwbApi.from_nwbfile(nwbfile)
    
&gt;       obt_running_speed = obt.get_running_speed()

test_write_behavior_nwb.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;allensdk.brain_observatory.behavior.session_apis.data_io.behavior_nwb_api.BehaviorNwbApi object at 0x7fce922053c0&gt;

    def get_running_speed(self):
&gt;       raise NotImplementedError()
E       NotImplementedError

../../../brain_observatory/behavior/session_apis/data_io/behavior_nwb_api.py:124: NotImplementedError</failure></testcase><testcase classname="allensdk.test.brain_observatory.behavior.test_write_behavior_nwb" name="test_add_stimulus_templates[True-behavior_stimuli_data_fixture0]" time="3.737" /><testcase time="0.003" /></testsuite></testsuites>